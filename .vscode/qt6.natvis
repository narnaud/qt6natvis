<?xml version="1.0" encoding="utf-8"?>
<!--
    ****************************************************************************
    **
    ** Copyright (C) 2022 The Qt Company Ltd.
    ** Contact: https://www.qt.io/licensing/
    **
    ** This file is part of the Qt VS Tools.
    **
    ** $QT_BEGIN_LICENSE:GPL-EXCEPT$
    ** Commercial License Usage
    ** Licensees holding valid commercial Qt licenses may use this file in
    ** accordance with the commercial license agreement provided with the
    ** Software or, alternatively, in accordance with the terms contained in
    ** a written agreement between you and The Qt Company. For licensing terms
    ** and conditions see https://www.qt.io/terms-conditions. For further
    ** information use the contact form at https://www.qt.io/contact-us.
    **
    ** GNU General Public License Usage
    ** Alternatively, this file may be used under the terms of the GNU
    ** General Public License version 3 as published by the Free Software
    ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
    ** included in the packaging of this file. Please review the following
    ** information to ensure the GNU General Public License requirements will
    ** be met: https://www.gnu.org/licenses/gpl-3.0.html.
    **
    ** $QT_END_LICENSE$
    **
    ****************************************************************************
-->

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

    <Type Name="QPropertyData&lt;*&gt;">
        <DisplayString>{val}</DisplayString>
        <Expand>
            <Item Name="[value]">val</Item>
        </Expand>
    </Type>

    <Type Name="QQuickItemPrivate">
        <Intrinsic Name="_hasExtraData" Expression="extra.d.d != 0" />
        <Intrinsic Name="_extraData" Expression="(*(ExtraData*)extra.d.d)" />
        <Intrinsic Name="_objectName" Expression="(extraData-&gt;objectName).val.d.ptr" />
        <DisplayString Condition="_hasExtraData()">{{ x = {x,g}, y = {y,g}, z = {_extraData().z,g}, width = {width,g}, height = {height,g} }}</DisplayString>
        <DisplayString>{{ x = {x,g}, y = {y,g}, width = {width,g}, height = {height,g} }}</DisplayString>
        <Expand>
            <Item Name="x">x</Item>
            <Item Name="y">y</Item>
            <Item Name="z" Condition="_hasExtraData()">_extraData().z</Item>
            <Item Name="scale" Condition="_hasExtraData()">_extraData().scale</Item>
            <Item Name="rotation" Condition="_hasExtraData()">_extraData().rotation</Item>
            <Item Name="opacity" Condition="_hasExtraData()">_extraData().opacity</Item>
            <Item Name="width">width</Item>
            <Item Name="height">height</Item>
            <Item Name="implicitWidth">implicitWidth</Item>
            <Item Name="implicitHeight">implicitHeight</Item>
            <Item Name="visible">effectiveVisible</Item>
            <Item Name="enabled">explicitEnable</Item>
            <Item Name="objectName" Condition="_objectName() != 0">_objectName(),na</Item>
            <Item Name="parentItem">parentItem</Item>
            <Item Name="childItems">childItems, nr</Item>
        </Expand>
    </Type>

    <Type Name="QQuickItem">
      <DisplayString>{d_ptr.d,na}</DisplayString>
      <Expand>
        <ExpandedItem>d_ptr.d</ExpandedItem>
      </Expand>
    </Type>

    <Type Name="QUuid">
        <DisplayString>{{{data1,Xb}-{data2,Xb}-{data3,Xb}-{(data4[0]),nvoXb}{(data4[1]),nvoXb}-{(data4[2]),nvoXb}{(data4[3]),nvoXb}{(data4[4]),nvoXb}{(data4[5]),nvoXb}{(data4[6]),nvoXb}{(data4[7]),nvoXb}}}</DisplayString>
    </Type>

   <Type Name="QSpecialInteger&lt;*&gt;">
        <DisplayString>{val}</DisplayString>
        <Expand>
            <Item Name="[value]">val</Item>
        </Expand>
    </Type>

   <Type Name="QBasicAtomicInteger&lt;*&gt;">
        <DisplayString>{_q_value}</DisplayString>
        <Expand>
            <Item Name="[value]">_q_value</Item>
        </Expand>
    </Type>

   <Type Name="QBasicAtomicPointer&lt;*&gt;">
        <Intrinsic Name="isNull" Expression="value()==0" />
        <Intrinsic Name="value" Expression="_q_value.value()" />
        <DisplayString Condition="isNull()">empty</DisplayString>
        <DisplayString Condition="!isNull()">{_q_value}</DisplayString>
        <Expand>
            <Item Name=" " Condition="!isNull()">*value()</Item>
        </Expand>
    </Type>

   <Type Name="QPoint">
        <AlternativeType Name="QPointF"/>
        <DisplayString>{{ x = {xp}, y = {yp} }}</DisplayString>
        <Expand>
            <Item Name="[x]">xp</Item>
            <Item Name="[y]">yp</Item>
        </Expand>
    </Type>

   <Type Name="QRect">
        <DisplayString>{{ x = {x1}, y = {y1}, width = {x2 - x1 + 1}, height = {y2 - y1 + 1} }}</DisplayString>
        <Expand>
            <Item Name="[x]">x1</Item>
            <Item Name="[y]">y1</Item>
            <Item Name="[width]">x2 - x1 + 1</Item>
            <Item Name="[height]">y2 - y1 + 1</Item>
        </Expand>
    </Type>

   <Type Name="QRectF">
        <DisplayString>{{ x = {xp}, y = {yp}, width = {w}, height = {h} }}</DisplayString>
        <Expand>
            <Item Name="[x]">xp</Item>
            <Item Name="[y]">yp</Item>
            <Item Name="[width]">w</Item>
            <Item Name="[height]">h</Item>
        </Expand>
    </Type>

   <Type Name="QSize">
        <AlternativeType Name="QSizeF"/>
        <DisplayString>{{ width = {wd}, height = {ht} }}</DisplayString>
        <Expand>
            <Item Name="[width]">wd</Item>
            <Item Name="[height]">ht</Item>
        </Expand>
    </Type>

   <Type Name="QLine">
        <AlternativeType Name="QLineF"/>
        <DisplayString>{{ start point = {pt1}, end point = {pt2} }}</DisplayString>
        <Expand>
            <Synthetic Name="[start point]">
                <DisplayString>{pt1}</DisplayString>
                <Expand>
                    <ExpandedItem>pt1</ExpandedItem>
                </Expand>
            </Synthetic>
            <Synthetic Name="[end point]">
                <DisplayString>{pt2}</DisplayString>
                <Expand>
                    <ExpandedItem>pt2</ExpandedItem>
                </Expand>
            </Synthetic>

        </Expand>
    </Type>

   <Type Name="QPolygon">
        <DisplayString>{{ size={d-&gt;size} }}</DisplayString>
        <Expand>
            <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
            <ArrayItems>
                <Size>d-&gt;size</Size>
                <ValuePointer>(QPoint*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

   <Type Name="QPolygonF">
        <DisplayString>{{ size={d-&gt;size} }}</DisplayString>
        <Expand>
            <Item Name="[closed]">
                d-&gt;size &gt; 0
                &amp;&amp; ((((QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)[0]).xp
                == (((QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)[d-&gt;size - 1]).xp)
                &amp;&amp; ((((QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)[0]).yp
                == (((QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)[d-&gt;size - 1]).yp)
            </Item>
            <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
            <ArrayItems>
                <Size>d-&gt;size</Size>
                <ValuePointer>(QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="QVector2D">
        <DisplayString>{{ x = {xp}, y = {yp} }}</DisplayString>
        <Expand>
            <Item Name="[x]">xp</Item>
            <Item Name="[y]">yp</Item>
        </Expand>
    </Type>

    <Type Name="QVector3D">
        <DisplayString>{{ x = {xp}, y = {yp}, z = {zp} }}</DisplayString>
        <Expand>
            <Item Name="[x]">xp</Item>
            <Item Name="[y]">yp</Item>
            <Item Name="[z]">zp</Item>
        </Expand>
    </Type>

    <Type Name="QVector4D">
        <DisplayString>{{ x = {xp}, y = {yp}, z = {zp}, w = {wp} }}</DisplayString>
        <Expand>
            <Item Name="[x]">xp</Item>
            <Item Name="[y]">yp</Item>
            <Item Name="[z]">zp</Item>
            <Item Name="[w]">wp</Item>
        </Expand>
    </Type>

    <Type Name="QMatrix">
        <DisplayString>
            {{ m11 = {_m11}, m12 = {_m12}, m21 = {_m21}, m22 = {_m22}, ... }}
        </DisplayString>
        <Expand>
            <Item Name="[m11]">_m11</Item>
            <Item Name="[m12]">_m12</Item>
            <Item Name="[m21]">_m21</Item>
            <Item Name="[m22]">_m22</Item>
            <Item Name="[dx]">_dx</Item>
            <Item Name="[dy]">_dy</Item>
        </Expand>
    </Type>

    <Type Name="QMatrix4x4">
        <DisplayString>
            {{ m11 = {m[0][0]}, m12 = {m[1][0]}, m13 = {m[2][0]}, m14 = {m[3][0]}, ... }}
        </DisplayString>
        <Expand>
            <Item Name="[m11]">m[0][0]</Item>
            <Item Name="[m12]">m[1][0]</Item>
            <Item Name="[m13]">m[2][0]</Item>
            <Item Name="[m14]">m[3][0]</Item>
            <Item Name="[m21]">m[0][1]</Item>
            <Item Name="[m22]">m[1][1]</Item>
            <Item Name="[m23]">m[2][1]</Item>
            <Item Name="[m24]">m[3][1]</Item>
            <Item Name="[m31]">m[0][2]</Item>
            <Item Name="[m32]">m[1][2]</Item>
            <Item Name="[m33]">m[2][2]</Item>
            <Item Name="[m34]">m[3][2]</Item>
            <Item Name="[m41]">m[0][3]</Item>
            <Item Name="[m42]">m[1][3]</Item>
            <Item Name="[m43]">m[2][3]</Item>
            <Item Name="[m44]">m[3][3]</Item>
        </Expand>
    </Type>

   <Type Name="QSizePolicy">
        <DisplayString>
            {{ horizontal = {static_cast&lt;Policy&gt;(bits.horPolicy)}, vertical = {static_cast&lt;Policy&gt;(bits.verPolicy)}, type = {ControlType(1 &lt;&lt; bits.ctype)} }}
        </DisplayString>
        <Expand>
            <Synthetic Name="[vertical policy]">
                <DisplayString>QSizePolicy::Policy::{static_cast&lt;Policy&gt;(bits.verPolicy)}</DisplayString>
            </Synthetic>
            <Synthetic Name="[horizontal policy]">
                <DisplayString>QSizePolicy::Policy::{static_cast&lt;Policy&gt;(bits.horPolicy)}</DisplayString>
            </Synthetic>
            <Synthetic Name="[control type]">
                <DisplayString>QSizePolicy::ControlType::{ControlType(1 &lt;&lt; bits.ctype)}</DisplayString>
            </Synthetic>
            <Synthetic Name="[expanding directions]">
                <DisplayString
                    Condition="(static_cast&lt;Policy&gt;(bits.verPolicy) &amp; ExpandFlag)">
                    Qt::Vertical (2)
                </DisplayString>
                <DisplayString
                    Condition="(static_cast&lt;Policy&gt;(bits.horPolicy) &amp; ExpandFlag)">
                    Qt::Horizontal (1)
                </DisplayString>
            </Synthetic>
            <Item Name="[vertical stretch]">static_cast&lt;int&gt;(bits.verStretch)</Item>
            <Item Name="[horizontal stretch]">static_cast&lt;int&gt;(bits.horStretch)</Item>
            <Item Name="[has height for width]">bits.hfw == 1</Item>
            <Item Name="[has width for height]">bits.wfh == 1</Item>
        </Expand>
    </Type>

   <Type Name="QChar">
        <DisplayString>{ucs,c}</DisplayString>
        <StringView>ucs,c</StringView>
        <Expand>
            <Item Name="[latin 1]">ucs > 0xff ? '\0' : char(ucs),c</Item>
            <Item Name="[unicode]">ucs,c</Item>
        </Expand>
    </Type>

   <Type Name="QString">
        <DisplayString>&quot;{(reinterpret_cast&lt;unsigned short*&gt;(d.ptr)),sub}&quot;</DisplayString>
        <StringView>(reinterpret_cast&lt;unsigned short*&gt;(d.ptr)),sub</StringView>
        <Expand>
            <Item Name="[size]">d.size</Item>
            <ArrayItems>
                <Size>d.size</Size>
                <ValuePointer>d.ptr</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="QStringRef">
        <DisplayString Condition="m_string == nullptr">{m_string,[m_size]} u""</DisplayString>
        <DisplayString Condition="m_string != nullptr">{m_string-&gt;d.ptr+m_position,[m_size]}</DisplayString>
        <StringView Condition="m_string == nullptr">""</StringView>
        <StringView Condition="m_string != nullptr">m_string,[m_position+m_size]</StringView>
        <Expand>
            <Item Name="[position]" ExcludeView="simple">m_position</Item>
            <Item Name="[size]" ExcludeView="simple">m_size</Item>
            <ArrayItems Condition="m_string != nullptr">
                <Size>m_size</Size>
                <ValuePointer>m_string-&gt;d.ptr+m_position</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="QStringView">
        <DisplayString>{m_data,[m_size]}</DisplayString>
        <StringView>m_data,[m_size]</StringView>
        <Expand>
            <Item Name="[size]" ExcludeView="simple">m_size</Item>
            <ArrayItems>
                <Size>m_size</Size>
                <ValuePointer>m_data</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="QByteArray">
        <DisplayString>&quot;{((reinterpret_cast&lt;char*&gt;(d.ptr))),sb}&quot;</DisplayString>
        <StringView>((reinterpret_cast&lt;char*&gt;(d.ptr))),sb</StringView>
        <Expand>
            <Item Name="[size]">d.size</Item>
            <ArrayItems>
                <Size>d.size</Size>
                <ValuePointer>d.ptr</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="QUrl">
        <Intrinsic Name="isEmpty" Expression="size==0">
            <Parameter Name="size" Type="int"/>
        </Intrinsic>
        <Intrinsic Name="memberOffset" Expression="sizeof(QAtomicInt) + sizeof(int) + (sizeof(QString) * count)">
            <Parameter Name="count" Type="int"/>
        </Intrinsic>
        <Intrinsic Name="scheme" Expression="*((QString*)(((char*)(d) + memberOffset(0))))" />
        <Intrinsic Name="username" Expression="*((QString*)(((char*)(d) + memberOffset(1))))" />
        <Intrinsic Name="password" Expression="*((QString*)(((char*)(d) + memberOffset(2))))" />
        <Intrinsic Name="host" Expression="*((QString*)(((char*)(d) + memberOffset(3))))" />
        <Intrinsic Name="path" Expression="*((QString*)(((char*)(d) + memberOffset(4))))" />
        <Intrinsic Name="query" Expression="*((QString*)(((char*)(d) + memberOffset(5))))" />
        <Intrinsic Name="fragment" Expression="*((QString*)(((char*)(d) + memberOffset(6))))" />

        <DisplayString Condition="!isEmpty(scheme().d-&gt;size)">{scheme()}://{host()}{path()}</DisplayString>
        <DisplayString Condition="isEmpty(scheme().d-&gt;size)">{path()}</DisplayString>
        <Expand>
            <Item Name="[scheme]">scheme()</Item>
            <Item Name="[username]">username()</Item>
            <Item Name="[password]">password()</Item>
            <Item Name="[host]">host()</Item>
            <Item Name="[path]">path()</Item>
            <Item Name="[query]">query()</Item>
            <Item Name="[fragment]">fragment()</Item>
        </Expand>
    </Type>

    <Type Name="QDate">
        <DisplayString>{{ julian day = {jd} }}</DisplayString>
    </Type>

   <Type Name="QTime">
        <Intrinsic Name="hour" Expression="mds / 3600000" />
        <Intrinsic Name="minute" Expression="(mds % 3600000) / 60000" />
        <Intrinsic Name="second" Expression="(mds / 1000) % 60" />
        <Intrinsic Name="millisecond" Expression="mds % 1000" />
        <DisplayString Condition="mds == 1">{{ millisecond = {mds} }}</DisplayString>
        <DisplayString Condition="mds != 1">{{ milliseconds = {mds} }}</DisplayString>
        <Expand>
            <Item Name="[hour]"
                  Condition="(mds / 3600000) == 1">hour(), d</Item>
            <Item Name="[hours]"
                  Condition="(mds / 3600000) != 1">hour(), d</Item>
            <Item Name="[minute]"
                  Condition="((mds % 3600000) / 60000) == 1">minute(), d</Item>
            <Item Name="[minutes]"
                  Condition="((mds % 3600000) / 60000) != 1">minute(), d</Item>
            <Item Name="[second]"
                  Condition="((mds / 1000) % 60) == 1">second(), d</Item>
            <Item Name="[seconds]"
                  Condition="((mds / 1000) % 60) != 1">second(), d</Item>
            <Item Name="[millisecond]"
                  Condition="(mds % 1000) == 1">millisecond(), d</Item>
            <Item Name="[milliseconds]"
                  Condition="(mds % 1000) != 1">millisecond(), d</Item>
        </Expand>
    </Type>

   <Type Name="QPair&lt;*,*&gt;">
        <DisplayString>({first}, {second})</DisplayString>
        <Expand>
            <Item Name="[first]">first</Item>
            <Item Name="[second]">second</Item>
        </Expand>
    </Type>

   <Type Name="QList&lt;*&gt;">
        <AlternativeType Name="QVector&lt;*&gt;"/>
        <DisplayString>{{ size={d.size} }}</DisplayString>
        <Expand>
            <ArrayItems>
                <Size>d.size</Size>
                <ValuePointer>reinterpret_cast&lt;$T1*&gt;(d.ptr)</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

   <Type Name="QVarLengthArray&lt;*&gt;">
        <DisplayString>{{ size={s} }}</DisplayString>
        <Expand>
            <Item Name="[capacity]">a</Item>
            <ArrayItems>
                <Size>s</Size>
                <ValuePointer>ptr</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="QMap&lt;*,*&gt;">
        <AlternativeType Name="QMultiMap&lt;*,*&gt;"/>
        <DisplayString>{{ size={d.d-&gt;m._Mypair._Myval2._Myval2._Mysize} }}</DisplayString>
        <Expand>
        <TreeItems>
            <Size>d.d-&gt;m._Mypair._Myval2._Myval2._Mysize</Size>
            <HeadPointer>d.d-&gt;m._Mypair._Myval2._Myval2._Myhead-&gt;_Parent</HeadPointer>
            <LeftPointer>_Left</LeftPointer>
            <RightPointer>_Right</RightPointer>
            <ValueNode Condition="_Isnil == 0" Name="[{_Myval.first}]">_Myval,view(MapHelper)</ValueNode>
        </TreeItems>
        </Expand>
    </Type>

    <Type Name="std::pair&lt;*, *&gt;" IncludeView="MapHelper">
        <DisplayString>{second}</DisplayString>
    </Type>

    <Type Name="QHashPrivate::Node&lt;*,*&gt;">
        <DisplayString>{value}</DisplayString>
        <Expand>
            <Item Name="key">key</Item>
            <Item Name="value">value</Item>
        </Expand>
    </Type>

    <Type Name="QHashPrivate::MultiNode&lt;*,*&gt;">
        <DisplayString Condition="value-&gt;next == 0">{value-&gt;value}</DisplayString>
        <DisplayString Condition="value-&gt;next != 0 &amp;&amp; value-&gt;next-&gt;next == 0">({value-&gt;value}, {value-&gt;next-&gt;value})</DisplayString>
        <DisplayString Condition="value-&gt;next != 0 &amp;&amp; value-&gt;next-&gt;next != 0">({value-&gt;value}, {value-&gt;next-&gt;value}, ...)</DisplayString>
        <Expand>
            <LinkedListItems>
                <HeadPointer>value</HeadPointer>
                <NextPointer>next</NextPointer>
                <ValueNode>value</ValueNode>
            </LinkedListItems>
        </Expand>
    </Type>

    <Type Name="QHash&lt;*,*&gt;">
        <AlternativeType Name="QMultiHash&lt;*,*&gt;"/>
        <DisplayString>{{ size={d-&gt;size} }}</DisplayString>
        <Expand>
            <CustomListItems MaxItemsPerView="5000">
                <Variable Name="iSpan" InitialValue="0" />
                <Variable Name="spanCount" InitialValue="d-&gt;numBuckets" />
                <Size>d-&gt;size</Size>
                <Loop>
                    <If Condition="iSpan != spanCount">
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[0]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[0] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[0]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[1]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[1] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[1]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[2]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[2] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[2]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[3]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[3] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[3]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[4]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[4] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[4]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[5]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[5] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[5]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[6]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[6] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[6]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[7]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[7] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[7]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[8]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[8] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[8]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[9]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[9] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[9]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[10]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[10] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[10]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[11]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[11] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[11]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[12]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[12] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[12]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[13]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[13] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[13]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[14]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[14] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[14]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[15]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[15] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[15]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[16]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[16] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[16]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[17]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[17] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[17]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[18]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[18] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[18]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[19]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[19] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[19]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[20]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[20] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[20]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[21]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[21] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[21]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[22]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[22] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[22]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[23]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[23] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[23]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[24]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[24] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[24]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[25]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[25] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[25]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[26]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[26] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[26]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[27]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[27] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[27]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[28]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[28] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[28]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[29]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[29] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[29]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[30]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[30] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[30]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[31]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[31] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[31]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[32]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[32] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[32]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[33]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[33] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[33]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[34]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[34] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[34]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[35]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[35] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[35]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[36]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[36] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[36]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[37]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[37] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[37]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[38]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[38] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[38]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[39]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[39] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[39]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[40]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[40] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[40]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[41]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[41] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[41]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[42]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[42] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[42]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[43]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[43] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[43]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[44]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[44] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[44]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[45]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[45] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[45]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[46]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[46] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[46]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[47]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[47] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[47]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[48]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[48] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[48]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[49]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[49] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[49]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[50]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[50] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[50]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[51]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[51] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[51]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[52]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[52] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[52]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[53]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[53] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[53]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[54]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[54] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[54]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[55]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[55] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[55]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[56]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[56] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[56]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[57]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[57] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[57]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[58]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[58] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[58]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[59]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[59] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[59]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[60]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[60] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[60]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[61]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[61] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[61]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[62]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[62] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[62]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[63]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[63] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[63]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[64]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[64] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[64]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[65]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[65] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[65]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[66]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[66] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[66]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[67]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[67] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[67]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[68]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[68] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[68]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[69]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[69] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[69]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[70]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[70] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[70]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[71]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[71] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[71]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[72]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[72] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[72]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[73]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[73] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[73]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[74]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[74] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[74]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[75]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[75] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[75]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[76]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[76] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[76]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[77]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[77] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[77]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[78]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[78] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[78]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[79]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[79] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[79]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[80]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[80] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[80]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[81]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[81] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[81]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[82]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[82] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[82]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[83]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[83] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[83]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[84]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[84] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[84]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[85]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[85] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[85]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[86]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[86] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[86]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[87]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[87] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[87]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[88]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[88] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[88]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[89]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[89] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[89]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[90]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[90] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[90]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[91]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[91] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[91]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[92]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[92] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[92]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[93]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[93] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[93]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[94]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[94] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[94]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[95]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[95] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[95]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[96]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[96] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[96]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[97]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[97] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[97]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[98]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[98] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[98]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[99]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[99] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[99]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[100]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[100] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[100]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[101]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[101] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[101]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[102]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[102] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[102]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[103]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[103] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[103]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[104]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[104] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[104]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[105]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[105] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[105]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[106]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[106] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[106]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[107]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[107] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[107]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[108]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[108] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[108]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[109]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[109] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[109]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[110]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[110] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[110]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[111]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[111] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[111]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[112]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[112] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[112]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[113]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[113] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[113]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[114]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[114] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[114]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[115]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[115] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[115]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[116]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[116] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[116]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[117]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[117] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[117]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[118]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[118] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[118]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[119]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[119] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[119]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[120]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[120] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[120]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[121]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[121] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[121]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[122]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[122] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[122]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[123]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[123] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[123]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[124]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[124] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[124]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[125]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[125] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[125]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[126]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[126] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[126]].storage))</Item>
                        <Item Name="[{((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[127]].storage))->key}]" Condition="d-&gt;spans[iSpan].offsets[127] != 255">*((Node*)(char *)&amp;(d-&gt;spans[iSpan].entries[d-&gt;spans[iSpan].offsets[127]].storage))</Item>
                        <Exec>iSpan++</Exec>
                    </If>
                </Loop>
            </CustomListItems>
        </Expand>
    </Type>

    <Type Name="QVariant">
        <Intrinsic Name="typeId" Expression="*(int*)(&amp;((const QtPrivate::QMetaTypeInterface *)(d.packedType &lt;&lt; 2))->typeId)">
        </Intrinsic>
        <Intrinsic Name="dataStar" Expression="(&amp;(d.data.data))">
        </Intrinsic>
        <DisplayString Condition="d.is_null">(null)</DisplayString>

        <!-- Static primitives-->
        <DisplayString Condition="typeId() == QMetaType::Bool">{*(bool*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::Int">{*(int*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::UInt">{*(unsigned int*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::LongLong">{*(long long*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::ULongLong">{*(unsigned long long*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::Double">{*(double*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::VoidStar">{*(void**) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::Long">{*(long*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::Short">{*(short*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::Char">{*(char*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::Char16">{*(char16_t*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::Char32">{*(char32_t*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::ULong">{*(unsigned long*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::UShort">{*(unsigned short*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::UChar">{*(unsigned char*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::Float">{*(float*) dataStar()}</DisplayString>
        <DisplayString Condition="typeId() == QMetaType::SChar">{*(signed char*) dataStar()}</DisplayString>

        <!-- Unhandled : display the typeId-->
        <DisplayString>QMetaType::Type ({typeId()})</DisplayString>
    </Type>

</AutoVisualizer>
